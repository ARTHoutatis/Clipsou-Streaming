// Correction compl√®te de tous les probl√®mes
// Popups, descriptions, images et boutons fermer

(function() {
  'use strict';
  
  console.log('üîß D√©marrage de la correction compl√®te...');
  
  // Configuration des corrections
  const fixes = {
    // Correction des images manquantes
    imageFallbacks: {
      'La1.jpg': 'La.jpg',
      'D√©1.jpg': 'D√©.jpg', 
      'Ja1.jpg': 'Ja.jpg',
      'Ka1.jpg': 'Ka.jpg',
      'Ba1.jpg': 'Ba.jpg',
      'Ur1.jpg': 'Ur.jpg',
      'Bac1.png': 'Bac.jpg',
      'Al.jpg': 'Al.jpg',
      'Law.jpg': 'Law.jpg'
    },
    
    // Descriptions manquantes
    descriptions: {
      'film1': 'Timmy, un enfant espi√®gle, nous fait visiter son village dans un monde enti√®rement construit en briques LEGO. Mais chaque coin de rue r√©serve son lot de gags et de surprises ! Une aventure familiale pleine d\'humour et de tendresse qui ravira petits et grands.',
      'film2': 'Deux fr√®res identiques, l\'un v√™tu de blanc et l\'autre de noir, s\'entendent √† merveille‚Ä¶ jusqu\'√† ce que l\'un finisse en prison. Dans l\'univers de Minecraft, ce thriller haletant m√™le com√©die, suspense et √©vasion.',
      'film3': 'Un aventurier un peu maladroit traverse des contr√©es hostiles remplies de cr√©atures f√©roces. Tourn√© en prise de vue r√©elle (live action), ce p√©riple √©pique m√™le humour et fantastique pour un voyage plein de surprises.',
      'film4': 'Victime de harc√®lement scolaire, une adolescente met fin √† ses jours. R√©alis√© en prise de vue r√©elle, ce r√©cit surnaturel suit le retour d\'un esprit tourment√© qui hante son bourreau et le plonge dans une spirale de terreur.',
      'film5': 'Un nouveau trailer de Batman, sombre et intense, r√©imagin√© dans l\'univers Minecraft. D√©couvrez des premi√®res images qui red√©finissent le chevalier noir avec une approche moderne et spectaculaire.',
      'film6': 'Le Noob vous pr√©sente, avec humour, la ville d\'Urbanos cr√©√©e sur Minecraft.',
      'film7': 'Apr√®s avoir chut√© √† travers le sol, Noob se retrouve pi√©g√© dans les Backrooms : un d√©dale sans fin de couloirs jaun√¢tres o√π bourdonnent les n√©ons et o√π r√¥dent d\'√©tranges pr√©sences. Entre zones instables, anomalies hostiles et rencontres inattendues, chaque pas le rapproche d\'une v√©rit√© inqui√©tante. Court-m√©trage r√©alis√© √† l\'occasion d\'une mise √† jour du serveur Minecraft Urbanos.',
      'serie1': 'Suivez les aventures captivantes d\'Alex, un personnage attachant dans un univers en briques LEGO. Cette s√©rie brickfilm innovante m√™le action, humour et √©motion dans des √©pisodes soigneusement r√©alis√©s qui plairont √† tous les √¢ges.',
      'serie2': 'Plongez dans l\'univers du Far West √† travers cette s√©rie brickfilm unique ! Cowboys en briques LEGO, duels au soleil couchant et esth√©tique VHS nostalgique : cette s√©rie r√©invente le western avec humour dans un style r√©tro irr√©sistible.'
    }
  };
  
  // Fonction pour corriger les images
  function fixImages() {
    console.log('üñºÔ∏è Correction des images...');
    
    const images = document.querySelectorAll('img');
    images.forEach(img => {
      const src = img.getAttribute('src');
      if (src && fixes.imageFallbacks[src]) {
        const fallback = fixes.imageFallbacks[src];
        img.addEventListener('error', function() {
          console.log(`üîÑ Image ${src} introuvable, utilisation de ${fallback}`);
          this.src = fallback;
        });
        
        // V√©rifier si l'image existe
        const testImg = new Image();
        testImg.onerror = () => {
          console.log(`‚ö†Ô∏è Image ${src} introuvable, remplacement par ${fallback}`);
          img.src = fallback;
        };
        testImg.src = src;
      }
    });
  }
  
  // Fonction pour corriger les descriptions manquantes
  function fixDescriptions() {
    console.log('üìù Correction des descriptions...');
    
    Object.keys(fixes.descriptions).forEach(popupId => {
      const popup = document.getElementById(popupId);
      if (!popup) return;
      
      const descriptionEl = popup.querySelector('.fiche-right p');
      if (!descriptionEl || !descriptionEl.textContent.trim()) {
        console.log(`üìù Ajout de description pour ${popupId}`);
        if (descriptionEl) {
          descriptionEl.textContent = fixes.descriptions[popupId];
        } else {
          // Cr√©er l'√©l√©ment description s'il n'existe pas
          const rightContent = popup.querySelector('.fiche-right');
          if (rightContent) {
            const p = document.createElement('p');
            p.textContent = fixes.descriptions[popupId];
            const buttonGroup = rightContent.querySelector('.button-group');
            if (buttonGroup) {
              rightContent.insertBefore(p, buttonGroup);
            } else {
              rightContent.appendChild(p);
            }
          }
        }
      }
    });
  }
  
  // Fonction pour corriger les popups qui ne s'ouvrent pas
  function fixPopupOpening() {
    console.log('üö™ Correction de l\'ouverture des popups...');
    
    // Gestionnaire pour les liens de popup
    document.addEventListener('click', function(e) {
      const link = e.target.closest('a[href^="#"]');
      if (!link) return;
      
      const href = link.getAttribute('href');
      const id = href ? href.replace(/^#/, '') : '';
      if (!id) return;
      
      const target = document.getElementById(id);
      if (!target || !target.classList.contains('fiche-popup')) return;
      
      console.log('üö™ Ouverture de popup:', id);
      e.preventDefault();
      
      // Ouvrir la popup (la gestion du scroll est faite par simple-scroll-fix.js)
      setTimeout(() => {
        window.location.hash = '#' + id;
      }, 0);
    }, true);
  }
  
  // Fonction pour corriger les boutons fermer
  function fixCloseButtons() {
    console.log('‚ùå Correction des boutons fermer...');
    
    // Gestionnaire pour les boutons fermer
    document.addEventListener('click', function(e) {
      const closeBtn = e.target.closest('.close-btn');
      if (!closeBtn) return;
      
      console.log('‚ùå Fermeture de popup');
      e.preventDefault();
      e.stopPropagation();
      
      // Nettoyer l'URL
      if (window.location.hash) {
        try {
          window.location.hash = '';
        } catch (err) {
          const url = window.location.pathname + window.location.search;
          if (window.history && window.history.replaceState) {
            window.history.replaceState(null, document.title, url);
          }
        }
      }
      
      return false;
    }, true);
    
    // Gestionnaire pour l'overlay
    document.addEventListener('click', function(e) {
      const popup = e.target.closest('.fiche-popup');
      if (popup && e.target === popup) {
        console.log('‚ùå Fermeture par overlay');
        e.preventDefault();
        
        // Nettoyer l'URL
        if (window.location.hash) {
          try {
            window.location.hash = '';
          } catch (err) {
            const url = window.location.pathname + window.location.search;
            if (window.history && window.history.replaceState) {
              window.history.replaceState(null, document.title, url);
            }
          }
        }
        
        return false;
      }
    }, true);
    
    // Gestionnaire pour Escape
    document.addEventListener('keydown', function(e) {
      if (e.key === 'Escape' && window.location.hash) {
        console.log('‚ùå Fermeture par Escape');
        e.preventDefault();
        
        // Nettoyer l'URL
        if (window.location.hash) {
          try {
            window.location.hash = '';
          } catch (err) {
            const url = window.location.pathname + window.location.search;
            if (window.history && window.history.replaceState) {
              window.history.replaceState(null, document.title, url);
            }
          }
        }
        
        return false;
      }
    }, true);
  }
  
  // Fonction pour corriger la structure des popups
  function fixPopupStructure() {
    console.log('üèóÔ∏è Correction de la structure des popups...');
    
    const popups = document.querySelectorAll('.fiche-popup');
    popups.forEach(popup => {
      // S'assurer que la popup a la bonne structure
      if (!popup.querySelector('.fiche-content')) {
        console.log('‚ö†Ô∏è Popup sans fiche-content:', popup.id);
        return;
      }
      
      // S'assurer que le bouton fermer existe
      if (!popup.querySelector('.close-btn')) {
        console.log('‚ö†Ô∏è Popup sans bouton fermer:', popup.id);
        const buttonGroup = popup.querySelector('.button-group');
        if (buttonGroup) {
          const closeBtn = document.createElement('a');
          closeBtn.href = '#';
          closeBtn.className = 'button close-btn';
          closeBtn.textContent = '‚ùå Fermer';
          buttonGroup.appendChild(closeBtn);
        }
      }
      
      // S'assurer que l'image a les bons attributs
      const img = popup.querySelector('img');
      if (img) {
        if (!img.hasAttribute('loading')) img.setAttribute('loading', 'lazy');
        if (!img.hasAttribute('decoding')) img.setAttribute('decoding', 'async');
        if (!img.getAttribute('alt')) img.setAttribute('alt', 'Image du contenu');
      }
    });
  }
  
  // Fonction pour corriger les styles CSS
  function fixCSS() {
    console.log('üé® Correction des styles CSS...');
    
    // Ajouter des styles de correction si n√©cessaire
    const style = document.createElement('style');
    style.textContent = `
      .fiche-popup {
        display: none !important;
      }
      .fiche-popup:target {
        display: flex !important;
      }
      .fiche-content {
        position: relative;
        z-index: 10000;
      }
      .close-btn {
        cursor: pointer !important;
      }
      .fiche-popup img {
        max-width: 100% !important;
        height: auto !important;
        object-fit: cover !important;
      }
    `;
    document.head.appendChild(style);
  }
  
  // Fonction principale d'initialisation
  function init() {
    console.log('üöÄ Initialisation de la correction compl√®te...');
    
    // Appliquer toutes les corrections
    fixImages();
    fixDescriptions();
    fixPopupOpening();
    fixCloseButtons();
    fixPopupStructure();
    fixCSS();
    
    // La gestion du scroll est maintenant enti√®rement d√©l√©gu√©e √† simple-scroll-fix.js
    
    console.log('‚úÖ Correction compl√®te termin√©e');
  }
  
  // D√©marrer l'initialisation
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', init);
  } else {
    init();
  }
  
  // Exposer les fonctions pour debug
  window.ClipsouFix = {
    fixImages,
    fixDescriptions,
    fixPopupOpening,
    fixCloseButtons,
    fixPopupStructure,
    fixes
  };
  
})();
